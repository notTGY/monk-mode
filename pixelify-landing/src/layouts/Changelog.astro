---
import '@/styles/globals.css'
import { Header } from '@/components/header'
import Footer from '@/components/footer.astro'
import type { CollectionEntry } from 'astro:content';
import FormattedDate from '@/components/formatted-date.astro';

type Props = CollectionEntry<'changelog'>['data'];

const { title, description, pubDate, updatedDate, heroImage } = Astro.props;

const slug = Astro.params.slug;
---
<!doctype html>
<html lang="en">
	<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">

<link rel="icon" type="image/png" href="/favicon-96x96.png" sizes="96x96" />
<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
<link rel="shortcut icon" href="/favicon.ico" />
<link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
<meta name="apple-mobile-web-app-title" content="Pixelify" />
<link rel="manifest" href="/site.webmanifest" />

<!-- HTML Meta Tags -->
<title>Pixelify</title>
<meta name="description" content="Block distractive images on websites to focus and get more work done.">

<!-- Facebook Meta Tags -->
<meta property="og:url" content={`https://pixelifyapp.com/changelog/${slug}`}>
<meta property="og:type" content="website">
<meta property="og:title" content={title}>
<meta property="og:description" content={description}>
<meta property="og:image" content={heroImage}>

<!-- Twitter Meta Tags -->
<meta name="twitter:card" content="summary_large_image">
<meta property="twitter:domain" content="pixelifyapp.com">
<meta property="twitter:url" content={`https://pixelifyapp.com/changelog/${slug}`}>
<meta name="twitter:title" content={title}>
<meta name="twitter:description" content={description}>
<meta name="twitter:image" content={heroImage}>
<!-- Meta Tags Generated via https://www.opengraph.xyz -->
	</head>
	<body>

<script is:inline>
	const getThemePreference = () => {
		if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
			return localStorage.getItem('theme');
		}
		return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
	};
	const isDark = getThemePreference() === 'dark';
	document.documentElement.classList[isDark ? 'add' : 'remove']('dark');

	if (typeof localStorage !== 'undefined') {
		const observer = new MutationObserver(() => {
			const isDark = document.documentElement.classList.contains('dark');
			localStorage.setItem('theme', isDark ? 'dark' : 'light');
		});
		observer.observe(document.documentElement, { attributes: true, attributeFilter: ['class'] });
	}
</script>

    <Header client:load/>

<article class="px-4 py-8 w-full max-w-3xl mx-auto prose">
	<h1 class="text-4xl font-bold py-2 max-w-prose">
		{title}
	</h1>
	<FormattedDate date={pubDate} />
	{
		(updatedDate ? <span>Updated: <FormattedDate date={updatedDate} /></span> : null)
	}

	<slot />
</article>

    <Footer/>
	</body>
</html>
